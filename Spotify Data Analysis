/* In this project, I used Spotify data sourced from Kaggle.
Then, I created a table and imported the Spotify data in a .CSV document and analyzed the data with SQL.*/

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

/*Show the top 5 artists with highest average danceability*/

SELECT danceability, track_name, artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg(danceability) desc
LIMIT 5;

/*Show the average danceability for all artists*/

SELECT artist_name, avg(danceability) AS 'Popularity'
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg(danceability) desc;

/*Show the average popularity for all artists */

SELECT artist_name, ROUND(avg(popularity),1) AS 'Popularity'
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg(popularity) desc;

/*Show the average energy for each artist's songs*/

SELECT artist_name,
avg(energy) AS 'Avg Energy'
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg(energy) desc;

/*Show the average loudness for each artist's songs*/

SELECT artist_name, ROUND(avg(loudness),1) AS 'Avg Loudness'
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg(loudness) desc;

/*Show the average tempo for each artist's songs*/

SELECT artist_name, ROUND(avg(tempo),1) AS 'Avg Tempo'
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg(tempo) desc;

/*Show the average popularity, danceability, energy, and loudness for the most popular artists*/

SELECT artist_name,
ROUND(avg(popularity),1) AS 'Avg Popularity',
ROUND(avg(danceability),1) AS 'Avg Danceability',
ROUND(avg(energy),1) AS " Avg Energy",
ROUND(avg(loudness),1) AS "Loudness",
ROUND(avg(tempo),1) AS "Tempo"
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity desc
LIMIT 10;

/*Show the average popularity, danceability, energy, and loudness for the least popular artists*/

SELECT artist_name,
ROUND(avg(popularity),1) AS 'Avg Popularity',
ROUND(avg(danceability),1) AS 'Avg Danceability',
ROUND(avg(energy),1) AS " Avg Energy",
ROUND(avg(loudness),1) AS "Loudness",
ROUND(avg(tempo),1) AS "Tempo"
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity asc
LIMIT 10;

/*Show artists with above-average popularity AND danceability*/

SELECT artist_name,
ROUND(avg(popularity),1) AS 'Avg Popularity',
ROUND(avg(danceability),1) AS 'Avg Danceability'
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING popularity >.75
AND danceability >.68045;






